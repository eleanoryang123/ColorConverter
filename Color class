package color;

public class Color {
	private final int MAX_COLOR = 255;
	private int rgbR;
	private int rgbG;
	private int rgbB;
	private int hsvH;
	private int hsvS;
	private int hsvV;
	
	/**
     * Constructs a Color object based on the specified color space type and values.
     * @param type the type of color space (1 for RGB, 2 for HSV)
     * @param value1 the value of the first component
     * @param value2 the value of the second component
     * @param value3 the value of the third component
     */
	public Color(int type, int value1, int value2, int value3){
		if(type == 1) {
			rgbR = value1;
			rgbG = value2;
			rgbB = value3;
		}
		else if(type == 2){
			hsvH = value1;
			hsvS = value2;
			hsvV = value3;
		}
		else {
			System.out.println("Invalid type value. Enter 1 or 2.");
		}
	}
	/**
     * Sets the RGB components of the color.
     * @param r the red component
     * @param g the green component
     * @param b the blue component
     */
	public void setRGB(int r, int g, int b){
		rgbR = r;
		rgbG = g;
		rgbB = b;
	}
	
	/**
     * Sets the HSV components of the color.
     * @param h the hue component
     * @param s the saturation component
     * @param v the value component
     */
	public void setHSV(int h, int s, int v){
		hsvH = h;
		hsvS = s;
		hsvV = v;
	}
	
	/**
     * Sets the red component of the color.
     * @param r the red component
     */
	public void setRed(int r) {
		rgbR = r;
	}
	
	/**
     * Sets the green component of the color.
     * @param g the green component
     */
	public void setGreen(int g) {
		rgbG = g;
	}
	
	/**
     * Sets the blue component of the color.
     * @param b the blue component
     */
	public void setBlue(int b) {
		rgbB = b;
	}
	
	/**
     * Sets the hue component of the color.
     * @param h the hue component
     */
	public void setHue(int h) {
		hsvH = h;
	}
	
	/**
     * Sets the saturation component of the color.
     * @param s the saturation component
     */
	public void setSaturation(int s) {
		hsvS = s;
	}
	
	/**
     * Sets the brightness component of the color.
     * @param b the hue component
     */
	public void setB(int b) {
		hsvV = b;
	}
	
	/**
     * Gets the RGB components of the color.
     * @return an array containing the red, green, and blue components
     */
	public int[] getRGB() {
		int[] rgb = {rgbR, rgbG, rgbB};
		return rgb;
		
	}
	
	/**
     * Gets the red component of the color.
     * @return a double containing the red component
     */
	public int getRed(){
		return rgbR;
	}
	
	/**
     * Gets the green component of the color.
     * @return a double containing the green component
     */
	public int getGreen(){
		return rgbG;
	}
	
	/**
     * Gets the blue component of the color.
     * @return a double containing the blue component
     */
	public int getBlue(){
		return rgbB;
	}
	
	/**
     * Gets the HSV components of the color.
     * @return an array containing the hue, saturation, and brightness components
     */
	public int[] getHSV() {
		int[] hsv = {hsvH, hsvS, hsvV};
		return hsv;
		
	}
	
	public int getHue(){
		return hsvH;
	}
	
	public int getSaturation(){
		return hsvS;
	}
	
	public int getBrightness(){
		return hsvV;
	}
	
	private double getMaximum(double one, double two, double three) {
		double[] arr = {one, two, three};
		double max = arr[0];
		for(int i = 0; i<arr.length; i++) {
			if(arr[i]>max) {
				max = arr[i];
			}
		}
		return max;
		
	}
	
	private double getMinimum(double one, double two, double three) {
		double[] arr = {one, two, three};
		double min = arr[0];
		for(int i = 0; i<arr.length; i++) {
			if(arr[i]<min) {
				min = arr[i];
			}
		}
		return min;
	}
	
	private void calculateHue(double r, double g, double b, double max, double min) {
		double newR = r/255;
		double newG = g/255;
		double newB = b/255;
		double delta = max-min;
		
		
		if(delta == 0) {
			hsvH = 0;
		}
	    if(max == newR){
			hsvH = (int)(60*(((newG-newB)/delta)%6));
		}
		if(max == newG) {
			hsvH = (int)(60*(((newB-newR)/delta)+2));
		}
		if(max == newB) {
			hsvH = (int)(60*(((newR-newG)/delta)+4));
		}
		
	}
	
	private void calculateSaturation(double max, double min) {
		double delta = max-min;
		if(max == 0) {
			hsvS = 0;
		}
		else {
			hsvS = (int)(delta/max*100);
		}
	}
	
	private void calculateBrightness(double max) {
		hsvV = (int)max;
	}
	
	public Color RGBtoHSV() {
		double max = getMaximum((double)rgbR/255, (double)rgbG/255, (double)rgbB/255);
		double min = getMinimum((double)rgbR/255, (double)rgbG/255, (double)rgbB/255);
		calculateHue(rgbR, rgbG, rgbB, max,min);
		calculateSaturation(max,min);
		calculateBrightness(max*100);
		setHSV(hsvH, hsvS, hsvV);
		return new Color(2, hsvH, hsvS, hsvV);


	}
	
	public Color HSVtoRGB() {
		int c = hsvV*hsvS;
		int x = c*(1-Math.abs((hsvH/60)%2-1));
		int m = hsvV-c;
		int newR = 0;
		int newG = 0;
		int newB = 0;
		int rPrime;
		int gPrime;
		int bPrime;
		if(hsvH>=0 && hsvH<60) {
			newR = c;
			newG = x;
		}
		if(hsvH>=60 && hsvH<120) {
			newR = x;
			newG = c;
		}
		if(hsvH>=120 && hsvH<180) {
			newG = c;
			newB = x;
		}
		if(hsvH>=180 && hsvH<240) {
			newG = x;
			newB = c;
		}
		if(hsvH>=240 && hsvH<300) {
			newR = x;
			newB = c;
		}
		if(hsvH>=300 && hsvH<360) {
			newR = c;
			newB = x;
		}
		rPrime = (newR+m)*MAX_COLOR;
		gPrime = (newG+m)*MAX_COLOR;
		bPrime = (newB+m)*MAX_COLOR;
		if(rPrime>MAX_COLOR) {
			rPrime = MAX_COLOR;
		}
		if(gPrime>MAX_COLOR) {
			gPrime = MAX_COLOR;
		}
		if(bPrime>MAX_COLOR) {
			bPrime = MAX_COLOR;
		}
		if(rPrime<255) {
			rPrime = (int)(rPrime)+1;
		}
		if(gPrime<255) {
			gPrime = (int)(rPrime)+1;
		}
		if(bPrime<255) {
			bPrime = (int)(rPrime)+1;
		}
		return new Color(1,rPrime,gPrime,bPrime);
		
	}
	
	public void printColor()
	{
		char c = 176;
		System.out.printf("%10s%3d%2s%3d%2s%3d%2s", "\tRGB = (" , rgbR , ", " , rgbG , ", " , rgbB , ")");
		System.out.printf("%10s%3d%2s%3d%2s%3d%2s", "HSV = (" , hsvH , (""+ c+", ")  , hsvS , "%, " , hsvV , "%)");
	}
	
}
